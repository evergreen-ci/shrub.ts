// source: src/shrub.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.shrub.CommandDefinition', null, global);
goog.exportSymbol('proto.shrub.Configuration', null, global);
goog.exportSymbol('proto.shrub.DisplayTaskDefinition', null, global);
goog.exportSymbol('proto.shrub.Task', null, global);
goog.exportSymbol('proto.shrub.TaskDependency', null, global);
goog.exportSymbol('proto.shrub.TaskGroup', null, global);
goog.exportSymbol('proto.shrub.TaskSpec', null, global);
goog.exportSymbol('proto.shrub.Variant', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.Configuration.repeatedFields_, null);
};
goog.inherits(proto.shrub.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.Configuration.displayName = 'proto.shrub.Configuration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.CommandDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.CommandDefinition.repeatedFields_, null);
};
goog.inherits(proto.shrub.CommandDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.CommandDefinition.displayName = 'proto.shrub.CommandDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.Variant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.Variant.repeatedFields_, null);
};
goog.inherits(proto.shrub.Variant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.Variant.displayName = 'proto.shrub.Variant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.DisplayTaskDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.DisplayTaskDefinition.repeatedFields_, null);
};
goog.inherits(proto.shrub.DisplayTaskDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.DisplayTaskDefinition.displayName = 'proto.shrub.DisplayTaskDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.TaskSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.TaskSpec.repeatedFields_, null);
};
goog.inherits(proto.shrub.TaskSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.TaskSpec.displayName = 'proto.shrub.TaskSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.TaskDependency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shrub.TaskDependency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.TaskDependency.displayName = 'proto.shrub.TaskDependency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.Task.repeatedFields_, null);
};
goog.inherits(proto.shrub.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.Task.displayName = 'proto.shrub.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shrub.TaskGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shrub.TaskGroup.repeatedFields_, null);
};
goog.inherits(proto.shrub.TaskGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shrub.TaskGroup.displayName = 'proto.shrub.TaskGroup';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.Configuration.repeatedFields_ = [2,3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionsMap: (f = msg.getFunctionsMap()) ? f.toObject(includeInstance, proto.shrub.CommandDefinition.toObject) : [],
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.shrub.Task.toObject, includeInstance),
    taskGroupsList: jspb.Message.toObjectList(msg.getTaskGroupsList(),
    proto.shrub.TaskGroup.toObject, includeInstance),
    buildvariantsList: jspb.Message.toObjectList(msg.getBuildvariantsList(),
    proto.shrub.Variant.toObject, includeInstance),
    preList: jspb.Message.toObjectList(msg.getPreList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    postList: jspb.Message.toObjectList(msg.getPostList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    timeoutList: jspb.Message.toObjectList(msg.getTimeoutList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    execTimeoutSecs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    batchtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    stepback: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    commandType: jspb.Message.getFieldWithDefault(msg, 11, ""),
    ignore: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.Configuration}
 */
proto.shrub.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.Configuration;
  return proto.shrub.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.Configuration}
 */
proto.shrub.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFunctionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.shrub.CommandDefinition.deserializeBinaryFromReader, "", new proto.shrub.CommandDefinition());
         });
      break;
    case 2:
      var value = new proto.shrub.Task;
      reader.readMessage(value,proto.shrub.Task.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    case 3:
      var value = new proto.shrub.TaskGroup;
      reader.readMessage(value,proto.shrub.TaskGroup.deserializeBinaryFromReader);
      msg.addTaskGroups(value);
      break;
    case 4:
      var value = new proto.shrub.Variant;
      reader.readMessage(value,proto.shrub.Variant.deserializeBinaryFromReader);
      msg.addBuildvariants(value);
      break;
    case 5:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addPre(value);
      break;
    case 6:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addPost(value);
      break;
    case 7:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addTimeout(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExecTimeoutSecs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchtime(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStepback(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandType(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIgnore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.shrub.CommandDefinition.serializeBinaryToWriter);
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.shrub.Task.serializeBinaryToWriter
    );
  }
  f = message.getTaskGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.shrub.TaskGroup.serializeBinaryToWriter
    );
  }
  f = message.getBuildvariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.shrub.Variant.serializeBinaryToWriter
    );
  }
  f = message.getPreList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getPostList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getExecTimeoutSecs();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getBatchtime();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getStepback();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCommandType();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIgnore();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * map<string, CommandDefinition> functions = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.shrub.CommandDefinition>}
 */
proto.shrub.Configuration.prototype.getFunctionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.shrub.CommandDefinition>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.shrub.CommandDefinition));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearFunctionsMap = function() {
  this.getFunctionsMap().clear();
  return this;};


/**
 * repeated Task tasks = 2;
 * @return {!Array<!proto.shrub.Task>}
 */
proto.shrub.Configuration.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.shrub.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.Task, 2));
};


/**
 * @param {!Array<!proto.shrub.Task>} value
 * @return {!proto.shrub.Configuration} returns this
*/
proto.shrub.Configuration.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.shrub.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.Task}
 */
proto.shrub.Configuration.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shrub.Task, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * repeated TaskGroup task_groups = 3;
 * @return {!Array<!proto.shrub.TaskGroup>}
 */
proto.shrub.Configuration.prototype.getTaskGroupsList = function() {
  return /** @type{!Array<!proto.shrub.TaskGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.TaskGroup, 3));
};


/**
 * @param {!Array<!proto.shrub.TaskGroup>} value
 * @return {!proto.shrub.Configuration} returns this
*/
proto.shrub.Configuration.prototype.setTaskGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.shrub.TaskGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.TaskGroup}
 */
proto.shrub.Configuration.prototype.addTaskGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shrub.TaskGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearTaskGroupsList = function() {
  return this.setTaskGroupsList([]);
};


/**
 * repeated Variant buildvariants = 4;
 * @return {!Array<!proto.shrub.Variant>}
 */
proto.shrub.Configuration.prototype.getBuildvariantsList = function() {
  return /** @type{!Array<!proto.shrub.Variant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.Variant, 4));
};


/**
 * @param {!Array<!proto.shrub.Variant>} value
 * @return {!proto.shrub.Configuration} returns this
*/
proto.shrub.Configuration.prototype.setBuildvariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.shrub.Variant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.Variant}
 */
proto.shrub.Configuration.prototype.addBuildvariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.shrub.Variant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearBuildvariantsList = function() {
  return this.setBuildvariantsList([]);
};


/**
 * repeated CommandDefinition pre = 5;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.Configuration.prototype.getPreList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 5));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.Configuration} returns this
*/
proto.shrub.Configuration.prototype.setPreList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.Configuration.prototype.addPre = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearPreList = function() {
  return this.setPreList([]);
};


/**
 * repeated CommandDefinition post = 6;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.Configuration.prototype.getPostList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 6));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.Configuration} returns this
*/
proto.shrub.Configuration.prototype.setPostList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.Configuration.prototype.addPost = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearPostList = function() {
  return this.setPostList([]);
};


/**
 * repeated CommandDefinition timeout = 7;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.Configuration.prototype.getTimeoutList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 7));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.Configuration} returns this
*/
proto.shrub.Configuration.prototype.setTimeoutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.Configuration.prototype.addTimeout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.clearTimeoutList = function() {
  return this.setTimeoutList([]);
};


/**
 * optional int32 exec_timeout_secs = 8;
 * @return {number}
 */
proto.shrub.Configuration.prototype.getExecTimeoutSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.setExecTimeoutSecs = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 batchtime = 9;
 * @return {number}
 */
proto.shrub.Configuration.prototype.getBatchtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.setBatchtime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool stepback = 10;
 * @return {boolean}
 */
proto.shrub.Configuration.prototype.getStepback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.setStepback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string command_type = 11;
 * @return {string}
 */
proto.shrub.Configuration.prototype.getCommandType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.setCommandType = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string ignore = 12;
 * @return {string}
 */
proto.shrub.Configuration.prototype.getIgnore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.Configuration} returns this
 */
proto.shrub.Configuration.prototype.setIgnore = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.CommandDefinition.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.CommandDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.CommandDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.CommandDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.CommandDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    func: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    command: jspb.Message.getFieldWithDefault(msg, 4, ""),
    variantsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    timeoutSecs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    paramsMap: (f = msg.getParamsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Struct.toObject) : [],
    varsMap: (f = msg.getVarsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.CommandDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.CommandDefinition;
  return proto.shrub.CommandDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.CommandDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.CommandDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addVariants(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeoutSecs(value);
      break;
    case 7:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Struct.deserializeBinaryFromReader, "", new proto.google.protobuf.Struct());
         });
      break;
    case 8:
      var value = msg.getVarsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.CommandDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.CommandDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.CommandDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.CommandDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getTimeoutSecs();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Struct.serializeBinaryToWriter);
  }
  f = message.getVarsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string func = 1;
 * @return {string}
 */
proto.shrub.CommandDefinition.prototype.getFunc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.setFunc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.shrub.CommandDefinition.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.shrub.CommandDefinition.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string command = 4;
 * @return {string}
 */
proto.shrub.CommandDefinition.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string variants = 5;
 * @return {!Array<string>}
 */
proto.shrub.CommandDefinition.prototype.getVariantsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.setVariantsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.addVariants = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};


/**
 * optional int32 timeout_secs = 6;
 * @return {number}
 */
proto.shrub.CommandDefinition.prototype.getTimeoutSecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.setTimeoutSecs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * map<string, google.protobuf.Struct> params = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Struct>}
 */
proto.shrub.CommandDefinition.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Struct>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.google.protobuf.Struct));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
  return this;};


/**
 * map<string, string> vars = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.shrub.CommandDefinition.prototype.getVarsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.shrub.CommandDefinition} returns this
 */
proto.shrub.CommandDefinition.prototype.clearVarsMap = function() {
  this.getVarsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.Variant.repeatedFields_ = [4,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.Variant.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.Variant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.Variant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.Variant.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    batchtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tasksList: jspb.Message.toObjectList(msg.getTasksList(),
    proto.shrub.TaskSpec.toObject, includeInstance),
    runOnList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    expansionsMap: (f = msg.getExpansionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Struct.toObject) : [],
    displayTasksList: jspb.Message.toObjectList(msg.getDisplayTasksList(),
    proto.shrub.DisplayTaskDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.Variant}
 */
proto.shrub.Variant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.Variant;
  return proto.shrub.Variant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.Variant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.Variant}
 */
proto.shrub.Variant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBatchtime(value);
      break;
    case 4:
      var value = new proto.shrub.TaskSpec;
      reader.readMessage(value,proto.shrub.TaskSpec.deserializeBinaryFromReader);
      msg.addTasks(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addRunOn(value);
      break;
    case 6:
      var value = msg.getExpansionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Struct.deserializeBinaryFromReader, "", new proto.google.protobuf.Struct());
         });
      break;
    case 7:
      var value = new proto.shrub.DisplayTaskDefinition;
      reader.readMessage(value,proto.shrub.DisplayTaskDefinition.deserializeBinaryFromReader);
      msg.addDisplayTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.Variant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.Variant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.Variant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.Variant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBatchtime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.shrub.TaskSpec.serializeBinaryToWriter
    );
  }
  f = message.getRunOnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getExpansionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Struct.serializeBinaryToWriter);
  }
  f = message.getDisplayTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.shrub.DisplayTaskDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shrub.Variant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.shrub.Variant.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 batchtime = 3;
 * @return {number}
 */
proto.shrub.Variant.prototype.getBatchtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.setBatchtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated TaskSpec tasks = 4;
 * @return {!Array<!proto.shrub.TaskSpec>}
 */
proto.shrub.Variant.prototype.getTasksList = function() {
  return /** @type{!Array<!proto.shrub.TaskSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.TaskSpec, 4));
};


/**
 * @param {!Array<!proto.shrub.TaskSpec>} value
 * @return {!proto.shrub.Variant} returns this
*/
proto.shrub.Variant.prototype.setTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.shrub.TaskSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.TaskSpec}
 */
proto.shrub.Variant.prototype.addTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.shrub.TaskSpec, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * repeated string run_on = 5;
 * @return {!Array<string>}
 */
proto.shrub.Variant.prototype.getRunOnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.setRunOnList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.addRunOn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.clearRunOnList = function() {
  return this.setRunOnList([]);
};


/**
 * map<string, google.protobuf.Struct> expansions = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Struct>}
 */
proto.shrub.Variant.prototype.getExpansionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Struct>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.google.protobuf.Struct));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.clearExpansionsMap = function() {
  this.getExpansionsMap().clear();
  return this;};


/**
 * repeated DisplayTaskDefinition display_tasks = 7;
 * @return {!Array<!proto.shrub.DisplayTaskDefinition>}
 */
proto.shrub.Variant.prototype.getDisplayTasksList = function() {
  return /** @type{!Array<!proto.shrub.DisplayTaskDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.DisplayTaskDefinition, 7));
};


/**
 * @param {!Array<!proto.shrub.DisplayTaskDefinition>} value
 * @return {!proto.shrub.Variant} returns this
*/
proto.shrub.Variant.prototype.setDisplayTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.shrub.DisplayTaskDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.DisplayTaskDefinition}
 */
proto.shrub.Variant.prototype.addDisplayTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shrub.DisplayTaskDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Variant} returns this
 */
proto.shrub.Variant.prototype.clearDisplayTasksList = function() {
  return this.setDisplayTasksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.DisplayTaskDefinition.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.DisplayTaskDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.DisplayTaskDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.DisplayTaskDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.DisplayTaskDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    executionTasksList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.DisplayTaskDefinition}
 */
proto.shrub.DisplayTaskDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.DisplayTaskDefinition;
  return proto.shrub.DisplayTaskDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.DisplayTaskDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.DisplayTaskDefinition}
 */
proto.shrub.DisplayTaskDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addExecutionTasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.DisplayTaskDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.DisplayTaskDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.DisplayTaskDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.DisplayTaskDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExecutionTasksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shrub.DisplayTaskDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.DisplayTaskDefinition} returns this
 */
proto.shrub.DisplayTaskDefinition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string execution_tasks = 2;
 * @return {!Array<string>}
 */
proto.shrub.DisplayTaskDefinition.prototype.getExecutionTasksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.shrub.DisplayTaskDefinition} returns this
 */
proto.shrub.DisplayTaskDefinition.prototype.setExecutionTasksList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.shrub.DisplayTaskDefinition} returns this
 */
proto.shrub.DisplayTaskDefinition.prototype.addExecutionTasks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.DisplayTaskDefinition} returns this
 */
proto.shrub.DisplayTaskDefinition.prototype.clearExecutionTasksList = function() {
  return this.setExecutionTasksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.TaskSpec.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.TaskSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.TaskSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.TaskSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.TaskSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stepback: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    distroList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.TaskSpec}
 */
proto.shrub.TaskSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.TaskSpec;
  return proto.shrub.TaskSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.TaskSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.TaskSpec}
 */
proto.shrub.TaskSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStepback(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDistro(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.TaskSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.TaskSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.TaskSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.TaskSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStepback();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDistroList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shrub.TaskSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.TaskSpec} returns this
 */
proto.shrub.TaskSpec.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool stepback = 2;
 * @return {boolean}
 */
proto.shrub.TaskSpec.prototype.getStepback = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.shrub.TaskSpec} returns this
 */
proto.shrub.TaskSpec.prototype.setStepback = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string distro = 3;
 * @return {!Array<string>}
 */
proto.shrub.TaskSpec.prototype.getDistroList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.shrub.TaskSpec} returns this
 */
proto.shrub.TaskSpec.prototype.setDistroList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.shrub.TaskSpec} returns this
 */
proto.shrub.TaskSpec.prototype.addDistro = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskSpec} returns this
 */
proto.shrub.TaskSpec.prototype.clearDistroList = function() {
  return this.setDistroList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.TaskDependency.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.TaskDependency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.TaskDependency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.TaskDependency.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variant: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.TaskDependency}
 */
proto.shrub.TaskDependency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.TaskDependency;
  return proto.shrub.TaskDependency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.TaskDependency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.TaskDependency}
 */
proto.shrub.TaskDependency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.TaskDependency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.TaskDependency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.TaskDependency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.TaskDependency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVariant();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shrub.TaskDependency.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.TaskDependency} returns this
 */
proto.shrub.TaskDependency.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string variant = 2;
 * @return {string}
 */
proto.shrub.TaskDependency.prototype.getVariant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.TaskDependency} returns this
 */
proto.shrub.TaskDependency.prototype.setVariant = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.Task.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dependsOnList: jspb.Message.toObjectList(msg.getDependsOnList(),
    proto.shrub.TaskDependency.toObject, includeInstance),
    commandsList: jspb.Message.toObjectList(msg.getCommandsList(),
    proto.shrub.CommandDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.Task}
 */
proto.shrub.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.Task;
  return proto.shrub.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.Task}
 */
proto.shrub.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 3:
      var value = new proto.shrub.TaskDependency;
      reader.readMessage(value,proto.shrub.TaskDependency.deserializeBinaryFromReader);
      msg.addDependsOn(value);
      break;
    case 4:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDependsOnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.shrub.TaskDependency.serializeBinaryToWriter
    );
  }
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shrub.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.Task} returns this
 */
proto.shrub.Task.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 priority = 2;
 * @return {number}
 */
proto.shrub.Task.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shrub.Task} returns this
 */
proto.shrub.Task.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated TaskDependency depends_on = 3;
 * @return {!Array<!proto.shrub.TaskDependency>}
 */
proto.shrub.Task.prototype.getDependsOnList = function() {
  return /** @type{!Array<!proto.shrub.TaskDependency>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.TaskDependency, 3));
};


/**
 * @param {!Array<!proto.shrub.TaskDependency>} value
 * @return {!proto.shrub.Task} returns this
*/
proto.shrub.Task.prototype.setDependsOnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.shrub.TaskDependency=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.TaskDependency}
 */
proto.shrub.Task.prototype.addDependsOn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shrub.TaskDependency, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Task} returns this
 */
proto.shrub.Task.prototype.clearDependsOnList = function() {
  return this.setDependsOnList([]);
};


/**
 * repeated CommandDefinition commands = 4;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.Task.prototype.getCommandsList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 4));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.Task} returns this
*/
proto.shrub.Task.prototype.setCommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.Task.prototype.addCommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.Task} returns this
 */
proto.shrub.Task.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shrub.TaskGroup.repeatedFields_ = [3,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shrub.TaskGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.shrub.TaskGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shrub.TaskGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.TaskGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maxHosts: jspb.Message.getFieldWithDefault(msg, 2, 0),
    setupGroupList: jspb.Message.toObjectList(msg.getSetupGroupList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    setupTaskList: jspb.Message.toObjectList(msg.getSetupTaskList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    tasksList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    teardownTasksList: jspb.Message.toObjectList(msg.getTeardownTasksList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    teardownGroupsList: jspb.Message.toObjectList(msg.getTeardownGroupsList(),
    proto.shrub.CommandDefinition.toObject, includeInstance),
    timeoutList: jspb.Message.toObjectList(msg.getTimeoutList(),
    proto.shrub.CommandDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shrub.TaskGroup}
 */
proto.shrub.TaskGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shrub.TaskGroup;
  return proto.shrub.TaskGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shrub.TaskGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shrub.TaskGroup}
 */
proto.shrub.TaskGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxHosts(value);
      break;
    case 3:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addSetupGroup(value);
      break;
    case 4:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addSetupTask(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTasks(value);
      break;
    case 6:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addTeardownTasks(value);
      break;
    case 7:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addTeardownGroups(value);
      break;
    case 8:
      var value = new proto.shrub.CommandDefinition;
      reader.readMessage(value,proto.shrub.CommandDefinition.deserializeBinaryFromReader);
      msg.addTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shrub.TaskGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shrub.TaskGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shrub.TaskGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shrub.TaskGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaxHosts();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSetupGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getSetupTaskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getTasksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getTeardownTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getTeardownGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
  f = message.getTimeoutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.shrub.CommandDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shrub.TaskGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 max_hosts = 2;
 * @return {number}
 */
proto.shrub.TaskGroup.prototype.getMaxHosts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.setMaxHosts = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated CommandDefinition setup_group = 3;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.TaskGroup.prototype.getSetupGroupList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 3));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.TaskGroup} returns this
*/
proto.shrub.TaskGroup.prototype.setSetupGroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.TaskGroup.prototype.addSetupGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.clearSetupGroupList = function() {
  return this.setSetupGroupList([]);
};


/**
 * repeated CommandDefinition setup_task = 4;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.TaskGroup.prototype.getSetupTaskList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 4));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.TaskGroup} returns this
*/
proto.shrub.TaskGroup.prototype.setSetupTaskList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.TaskGroup.prototype.addSetupTask = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.clearSetupTaskList = function() {
  return this.setSetupTaskList([]);
};


/**
 * repeated string tasks = 5;
 * @return {!Array<string>}
 */
proto.shrub.TaskGroup.prototype.getTasksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.setTasksList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.addTasks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.clearTasksList = function() {
  return this.setTasksList([]);
};


/**
 * repeated CommandDefinition teardown_tasks = 6;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.TaskGroup.prototype.getTeardownTasksList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 6));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.TaskGroup} returns this
*/
proto.shrub.TaskGroup.prototype.setTeardownTasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.TaskGroup.prototype.addTeardownTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.clearTeardownTasksList = function() {
  return this.setTeardownTasksList([]);
};


/**
 * repeated CommandDefinition teardown_groups = 7;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.TaskGroup.prototype.getTeardownGroupsList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 7));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.TaskGroup} returns this
*/
proto.shrub.TaskGroup.prototype.setTeardownGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.TaskGroup.prototype.addTeardownGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.clearTeardownGroupsList = function() {
  return this.setTeardownGroupsList([]);
};


/**
 * repeated CommandDefinition timeout = 8;
 * @return {!Array<!proto.shrub.CommandDefinition>}
 */
proto.shrub.TaskGroup.prototype.getTimeoutList = function() {
  return /** @type{!Array<!proto.shrub.CommandDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shrub.CommandDefinition, 8));
};


/**
 * @param {!Array<!proto.shrub.CommandDefinition>} value
 * @return {!proto.shrub.TaskGroup} returns this
*/
proto.shrub.TaskGroup.prototype.setTimeoutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.shrub.CommandDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shrub.CommandDefinition}
 */
proto.shrub.TaskGroup.prototype.addTimeout = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.shrub.CommandDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shrub.TaskGroup} returns this
 */
proto.shrub.TaskGroup.prototype.clearTimeoutList = function() {
  return this.setTimeoutList([]);
};


goog.object.extend(exports, proto.shrub);
